{"mappings":"AAqFgB,IAAIA,SAAQ,SAACC,EAASC,GACpCA,EAAO,Q,IAINC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,E,IAEbD,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACL,G,IAERD,MAAK,SAAAC,GACJC,QAAQC,IAAIF,E,IAEbG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,E","sources":["src/js/promise.js"],"sourcesContent":["/*\n * Promesa\n */\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     const randonNum = Math.random();\n//     if (randonNum < 0.5) {\n//       resolve('Good');\n//     } else {\n//       reject('Error');\n//     }\n//   }, 2000);\n// });\n\n// console.log(promise);\n\n// promise.then(\n//   (data) => {\n//     console.log(data);\n//   },\n//   (err) => {\n//     console.log(err);\n//   }\n// );\n\n// promise\n//   .then((data) => {\n//     data = data + '!!!';\n//     console.log(data);\n//     return data;\n//   })\n//   .then((data) => {\n//     data = data + '&&&';\n//     console.log(data);\n//   })\n//   .catch((err) => {\n//     console.log(err);\n//   })\n//   .finally(() => {\n//     console.log('Hello');\n//   });\n\n//? constructor new Promise(callback(resolve, reject));\n\n//? then(onSuccess, onError)\n\n//? Cadenas de promesas y catch(onError)\n\n//? finally()\n\n//? TASK 01\n// ¿Es posible 'resolver' una promesa nuevamente??\n// const promise = new Promise((resolve, reject) => {\n//   // resolve(1);\n\n//   setTimeout(() => {\n//     resolve(2);\n//   }, 1000);\n// });\n\n// promise.then((result) => {\n//   console.log(result);\n// });\n\n//? TASK 02\n// ¿Qué aparecerá en la consola?\n// const promise = new Promise((resolve, reject) => {\n//   resolve('1');\n// });\n\n// promise\n//   .then(data => {\n//     console.log(data); // '1'\n//   })\n//   .then(data => {\n//     console.log(data); // undefined\n//     return '2';\n//   })\n//   .then(data => {\n//     console.log(data); // '2'\n//   });\n\n//? TASK 03\n// ¿Qué aparecerá en la consola?\nconst promise = new Promise((resolve, reject) => {\n  reject('error');\n});\n\npromise\n  .then(data => {\n    console.log(data);\n  })\n  .then(data => {\n    console.log(data);\n    return '2';\n  })\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n"],"names":["Promise","resolve","reject","then","data","console","log","catch","error"],"version":3,"file":"promise.9bee71cc.js.map"}